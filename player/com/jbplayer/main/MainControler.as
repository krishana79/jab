package com.jbplayer.main{	import flash.display.MovieClip;	import com.jbplayer.videostream.RTMP;	import com.jbplayer.videostream.HTTPProgressive;	import com.jbplayer.videostream.Stream;	import flash.events.Event;	import com.jbplayer.audiostream.Mp3Player;	import com.model.PlayerData;	import flash.events.MouseEvent;	import flash.display.LoaderInfo;	public class MainControler extends MovieClip	{		public var streamURL:String = "RTMP";		private var rtmpstream:Stream;		private var player:Mp3Player;		private var isAudioLoad:Boolean = true;		public function MainControler()		{			var paramObj:Object = LoaderInfo(this.loaderInfo).parameters;			if (paramObj.audiostream != undefined)			{				PlayerData.audioStream = paramObj.audiostream;			}			else			{				PlayerData.audioStream = "sample_audio";			}						if (paramObj.videostream != undefined)			{				PlayerData.videostream = paramObj.videostream;			}			else			{				PlayerData.videostream = "sample_video";			}						if (paramObj.loopcount != undefined)			{				PlayerData.loopcount = paramObj.loopcount;			}			else			{				PlayerData.loopcount = 0;			}									setstage();			initPlayer();		}		private function initPlayer():void		{			rtmpstream = new Stream(this);			rtmpstream.addEventListener("PAUSE_STREAM", onPauseHandler);			rtmpstream.addEventListener("PLAY_STREAM", onPlayHandler);			rtmpstream.addEventListener("DURATION_RECIEVED", onDurationRecieved);			rtmpstream.addEventListener("STREAM_END", onStreamEnd);			rtmpstream.addEventListener("AUDIO_ON", onAudioOn);			rtmpstream.addEventListener("AUDIO_OFF", onAudioPause);			player = new Mp3Player();			player.addEventListener("ERROR_AUDIO_FILE", onAudioError);			playerControl.seekBar.seekbg.buttonMode = true;			playerControl._btnPlay.buttonMode = true;			playerControl.audio.buttonMode = true;		}		private function setstage():void		{			playerControl.audio.x = stage.stageWidth - playerControl.audio.width;			playerControl.seekBar.seekbg.width = playerControl.audio.x - playerControl.seekBar.x;			_video.x = 0;			_video.y = 0;			_video.width = stage.stageWidth;			_video.height = stage.stageHeight;		}		public function playMusic():void		{			player.play(PlayerData.audioBaseURL + PlayerData.audioStream + '.mp3');		}		private function onPauseHandler(e:Event):void		{			player.pause();		}		private function onPlayHandler(e:Event):void		{			player.unpause();		}		private function onDurationRecieved(e:Event):void		{			if (isAudioLoad)			{				playMusic();			}		}		private function onAudioPause(e:Event):void		{			if (isAudioLoad)			{				player.volume = 0;			}		}		private function onAudioOn(e:Event):void		{			if (isAudioLoad)			{				player.volume = .8;			}		}		private function onStreamEnd(e:Event):void		{			player.pause();		}		private function onAudioError(e:Event):void		{			isAudioLoad = false;		}		// ===	}}